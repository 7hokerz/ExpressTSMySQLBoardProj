TODO

프론트
- 게시글 페이지에 로그인 패널 별도 구현
- 게시글 작성 페이지에서
    텍스트와 이미지를 함께 적용하는 패널 구현
- 검색 바*
- 회원 설정 페이지
- 회원 탈퇴 시 json을 받는 코드 필요
- 대부분의 form 형식을 fetch 형식으로 재구현
- ejs 요소들을 컴포넌트로 분리하여 가독성 개선 필요

백
- rateLimit 모듈을 이용한 트래픽 제한 
- 게시글 수정 시 이미지 수정 가능하도록 구현
- 검색 기능*
- 회원별 설정에 따른 기능*
- Jest 등 테스트 모듈을 활용하기 위한 기초 작업 진행
- Class-Validator 도입에 따라 대규모적인 DTO 변경 중...(UserDTO 완료)
- 코드 복잡성, 가독성 등 장기적으로 개선 필요
- 프로젝트 구조 개선 필요



2024.12.18
- 좋아요 기능에 좋아요 유무 및 로딩에 따른 구별 구현
    1. 좋아요 유무에 따라 버튼 색이 다름
    2. 작업이 처리될 동안 좋아요 버튼을 비활성화(loading) 
    만약의 오류를 방지할 수 있음.


2024.12.17
- 좋아요 기능 대폭 수정
    1. 기존의 form 형태에서 fetch 형태로 변경
    2. likeStatus.js로 별도의 클래스를 생성하여 좋아요 기능 관리
    3. 전체 페이지를 재로드 하지 않고 좋아요 기능에 대해서만 갱신하도록 구현
    4. like: post로, unlike: delete 메서드로 지정
    5. like 상태를 열거형으로 관리
    - 큰 이점: 페이지를 전체 로딩하지 않아 비용 감소

- postmanager.js 파일 생성, form 대신 fetch 형태로 대체 구현

2024.12.16
- 컨트롤러 레이어에서, 타입 가드를 이용하여 타입 안정성 개선
    '!' 타입 단언 연산자 대신 타입 가드 함수를 사용하여
    명확한 에러 처리 및 타입 안전성을 개선함.

- Class-Validator 도입에 따라 대규모적인 DTO 변경 중...(UserDTO 완료)
    컨트롤러 레이어에서 데이터를 검증하는 역할

- DTO를 request와 response 버전으로 나누어 분리
    더욱 명확한 역할 분리 및 대응 가능

- AsyncHandler => AsyncWrapper로 이름 변경
    클래스를 감싸서 trycatch문을 처리하는 데코레이터로서
    명확한 역할을 알 수 있는 이름으로 변경

2024.12.15
- 별도 에러 클래스 구현 및 에러 미들웨어 수정 완료
    일관성 있는 에러 및 명확한 에러

- 페이지네이션 구현
    + DAO에 개수 제한을 둔 게시글 불러오기 추가
    + 서비스, 컨트롤러 계층에서 게시글 불러오기를 위 메서드로 수정

2024.12.14
- ApiResponse<T> 인터페이스 도입 및 응답 핸들러 구현
    일관성 있는 응답, 컨트롤러 개선

2024.12.13
- SSE, uploadImage 의 JS 클라이언트단 코드를 별도로 분리하여 보관
    코드 중복 감소

2024.12.12
- JwtToken(TokenUtil) 싱글턴 패턴으로 변경
+ TokenUtil을 사용하는 모든 클래스에 대하여
    DI를 이용하여 인스턴스 주입 
    - 이로 인해 로그인 및 게시물 로딩 전체적인 오버헤드 감소
    매 요청마다 객체를 생성하지 않으므로.

- 테스트 라우터를 만들어 기능 테스트를 진행할 수 있는 장소 생성

- DAOFactory 클래스에서 동일한 커넥션에 대해 싱글턴 패턴 적용
    인스턴스를 Map에 저장하고, MySQL의 스레드 ID를 키로 식별하고
    동일한 커넥션일 경우 이미 존재하는 인스턴스를 반환함.

2024.12.11
- 모든 데코레이터에 제네릭 타입을 추가하여 타입 안전성 확보
    생성자 타입을 나타내는 정보를 추가하였음.

- 커스텀 에러 핸들러를 수정하여 여러 경우에 대한 별도의 응답 처리 구현
    + 모든 fetch 요청 header에 Accept 속성을 추가하여
        에러 처리 시 원하는 응답을 받도록 지정

2024.12.10
- AsyncHandler 클래스 데코레이터 추가 및 autoBind 데코레이터 수정
    컨트롤러에서 try catch 문, 즉 에러 처리를 자동화하는 데코레이터
    ** 문제점 발생 및 해결
        express 미들웨어는 독립적인 함수로 호출되므로, this 바인딩 처리가 필요.

        기존 this 바인딩은 메서드 데코레이터인 autoBind로 처리하였으나
        AsyncHandler를 추가함에따라 오류가 발생하였음.
        (autoBind의 configurable: true 지정 이전에 클래스 데코레이터가 실행되어 
        수정을 시도하려고 하기 때문. 기본값은 false)

        따라서 autoBind를 클래스 데코레이터로 전환하고, 이를 AsyncHandler 이전에
        추가하여 문제점을 해결. 코드 중복 및 가독성이 향상되었음.

- token.ts를 util 디렉토리에 이동하고, index.ts로 모듈화
    명확한 역할 명시 및 분리

- withConnection 데코레이터를 withDB 클래스 데코레이터로 수정 및 교체
    추가로 트랜잭션 사용을 위해 Transaction 데코레이터도 생성
    (메타데이터를 이용하여 Transaction 사용 여부를 구분함.)

2024.12.09
- 게시글 삭제 시 이미지 삭제 기능(추가) (트랜잭션) 구현
    이미지 경로를 DB에서 획득한 후 
    DB 작업 전 이미지 삭제 작업 우선 실시
    >> 트랜잭션을 유지하기 위함.
